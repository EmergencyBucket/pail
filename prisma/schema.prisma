// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DATABASE_URL_NON_POOLING")
  shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  team          Team?     @relation(fields: [teamId], references: [id])
  teamId        String?
  admin         Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id           String     @id @default(cuid())
  name         String
  description  String
  files        String[]
  flag         String
  solved       Solve[]
  category     Category   @default(MISC)
  difficulty   Difficulty @default(EASY)
  firstBlood   DateTime?
  image        String?
  staticPoints Int?
}

model Team {
  id      String  @id @default(cuid())
  name    String  @unique
  secret  String  @unique @default(cuid())
  members User[]
  solves  Solve[]
}

model Solve {
  id          String    @id @default(cuid())
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  team        Team      @relation(fields: [teamId], references: [id])
  teamId      String
  time        DateTime
}

model Setting {
  key    String  @id @unique
  value  String
  public Boolean @default(false)
}

model Host {
  id     String  @id @default(cuid())
  port   Int?
  remote String  @unique
  ip     String?
  ca     String?
  cert   String?
  key    String?
}

enum Category {
  WEB
  CRYPTO
  REV
  PWN
  MISC
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
